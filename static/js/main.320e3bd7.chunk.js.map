{"version":3,"sources":["Components/theme.tsx","Components/Overlay.tsx","Components/Content.tsx","Components/Modal.tsx","Components/App.tsx","Components/MWButton.tsx","Components/CloseButton.tsx","index.tsx"],"names":["styled","default","css","createGlobalStyle","keyframes","ThemeProvider","theme","backgroundColor","borderRadius","transitionDuration","innerPadding","button","color","position","fadein","fadeout","Overlay","div","props","fade","OverlayContainer","onClick","handleEvent","onAnimationEnd","Content","Inner","PanelContent","className","animation","visible","children","ModalElement","Modal","onTransitionEnd","GlobalStyle","ModalWindow","useState","togglePanel","setTogglePanel","isPanelVisible","setPanelVisible","hasOverlayAnimationEnded","sethasOverlayAnimationEnded","hasPanelTransitionEnded","sethasPanelTransitionEnded","setFade","useEffect","open","Fragment","closeHandler","PanelButton","Button","text","CloseButton","ModalWindowContainer","effect","setEffect","setOpen","closeModalWindow","alt","src","onChange","e","currentTarget","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.320e3bd7.chunk.js","sourcesContent":["import * as styledComponents from 'styled-components'\n\nconst { default: styled, css, createGlobalStyle, keyframes, ThemeProvider } = styledComponents as styledComponents.ThemedStyledComponentsModule<IThemeInterface>\n\nexport interface IThemeInterface {\n\tbackgroundColor: string\n\tborderRadius: string\n\ttransitionDuration: string\n\tinnerPadding: string\n\tbutton: {\n\t\tbackgroundColor: string\n\t\tcolor: string\n\t\tposition: string\n\t}\n}\n\nexport const theme = {\n\tbackgroundColor: '#E3DFDA',\n\tborderRadius: '7px',\n\ttransitionDuration: '0.5s',\n\tinnerPadding: '0px',\n\tbutton: {\n\t\tbackgroundColor: '#8DBFD1',\n\t\tcolor: '#fff',\n\t\tposition: 'right'\n\t}\n}\n\nexport default styled\nexport { styled, css, createGlobalStyle, keyframes, ThemeProvider }\n","import React from 'react'\nimport { styled, css, keyframes } from './theme'\nimport { FadeType } from './Types/Types'\n\nconst fadein = keyframes`\n\t0% { opacity: 0;}\n\t100% {opacity: 1;}\n`\n\nconst fadeout = keyframes`\n\t100% {opacity: 0;}\n\t0% { opacity: 1;}\n`\n\ntype OverlayType = {\n\tfade: FadeType\n}\n\nconst Overlay = styled.div<OverlayType>`\n\tbackface-visibility: hidden;\n\tposition: fixed;\n\tz-index: 1000;\n\ttop: -5000px;\n\tright: -5000px;\n\tbottom: -5000px;\n\tleft: -5000px;\n\tdisplay: none;\n\tbackground: rgba(43,46,56,.9);\n  ${props =>\n\t\tprops.fade === 'in' &&\n\t\tcss`\n\t\t\tanimation: ${fadein};\n\t\t\tanimation-duration: ${props.theme.transitionDuration};\n\t\t\tanimation-fill-mode: forwards;\n\t\t\tanimation-timing-function: ease-in;\n\t\t\tanimation-iteration-count: 1;\n\t\t\tdisplay: block;\n\t\t`}\n  ${props =>\n\t\tprops.fade === 'out' &&\n\t\tcss`\n\t\t\tanimation: ${fadeout};\n\t\t\tanimation-duration: ${props.theme.transitionDuration};\n\t\t\tanimation-timing-function: ease-out;\n\t\t\tanimation-fill-mode: forwards;\n\t\t\tanimation-iteration-count: 1;\n\t\t\topacity: 1;\n\t\t\tdisplay: block;\n\t\t`}\n\t${props =>\n\t\tprops.fade === '' &&\n\t\tcss`\n\t\t\tdisplay: none;\n\t\t`}\n`\n\ninterface iProps {\n\tfade: FadeType\n\thandleEvent: () => void\n\tonAnimationEnd: () => void\n}\n\nfunction OverlayContainer(props: iProps) {\n\treturn <Overlay fade={props.fade} onClick={props.handleEvent} onAnimationEnd={props.onAnimationEnd} />\n}\n\nexport default OverlayContainer\n","import React from 'react'\nimport { styled } from './theme'\nimport { AnimationType } from './Types/Types'\nimport './Animations/animations.scss'\n\nconst Content = styled.div`\n\tcolor: #fff;\n\tbackground: #eae9e3;\n\tmargin: 0 auto;\n\tmax-width: 600px;\n\toverflow: hidden;\n\tposition: absolute;\n\tbottom: 70px;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tborder-radius: 7px;\n`\n\nconst Inner = styled.div`\n\toverflow-y: auto;\n\tpadding-left: 20px;\n\tpadding-right: 20px;\n\tpadding-top: 30px;\n\tpadding-bottom: 30px;\n\tmargin: 0;\n\tfont-weight: 300;\n\tfont-size: 16px;\n\tcolor: #333;\n\tposition: absolute;\n\tbottom: 0px;\n\ttop: 0px;\n\timg {\n\t\tmargin-bottom: 15px;\n\t}\n`\n\ninterface iProps {\n\tvisible: boolean\n\tanimation: AnimationType\n\tchildren?: JSX.Element[] | JSX.Element\n}\n\nfunction setStyle(animation: AnimationType, visible: boolean) {\n\tif (visible) {\n\t\tconst css = animation + ' show-' + animation\n\t\treturn css\n\t} else {\n\t\treturn animation\n\t}\n}\n\nfunction PanelContent(props: iProps) {\n\t//console.log('CONTENT.TSX: props.animation: ' + props.animation)\n\treturn (\n\t\t<Content className={setStyle(props.animation, props.visible)}>\n\t\t\t<Inner>{props.children}</Inner>\n\t\t</Content>\n\t)\n}\n\nexport default PanelContent\n","import React from 'react'\nimport { styled, css } from './theme'\nimport { AnimationType } from './Types/Types'\nimport Content from './Content'\n\ntype PanelType = {\n\tvisible: boolean\n}\n\nconst ModalElement = styled.div<PanelType>`\n\tposition: fixed;\n  border-radius: 7px;\n  top: 20px;\n  left: 20px;\n  right: 20px;\n  bottom: -50px;\n  max-width: 700px;\n\tz-index: 2000;\n\tvisibility: hidden;\n\tbackface-visibility: hidden;\n\n\t@media (min-width: 768px) {\n    top: 50%;\n  \tleft: 50%;\n  \twidth: 80%;\n    max-width: 600px;\n    height: 75%;\n    transform: translateX(-50%) translateY(-46%);\n\t}\n\n\n\t${(props) =>\n\t\tprops.visible &&\n\t\tcss`\n\t\t\tvisibility: visible;\n\t\t\topacity: 1;\n\t\t`}\n\t}\n`\n\nfunction setStyle(animation: AnimationType) {\n\treturn animation + '-modal'\n}\n\ninterface iProps {\n\tvisible: boolean\n\tanimation: AnimationType\n\tonTransitionEnd: () => void\n\tchildren?: JSX.Element[] | JSX.Element\n}\n\nfunction Modal(props: iProps) {\n\t//console.log('MODAL.TSX: props.animation: ' + props.animation)\n\treturn (\n\t\t<ModalElement className={setStyle(props.animation)} visible={props.visible} onTransitionEnd={props.onTransitionEnd}>\n\t\t\t<Content visible={props.visible} animation={props.animation} children={props.children} />\n\t\t</ModalElement>\n\t)\n}\n\nexport default Modal\n","import React, { useState, useEffect } from 'react'\nimport { css, createGlobalStyle } from './theme'\nimport { FadeType, AnimationType } from './Types/Types'\nimport Overlay from './Overlay'\nimport Modal from './Modal'\n\nconst GlobalStyle = createGlobalStyle<{ visible: boolean }>`\nbody {\n\t${(props) =>\n\t\tprops.visible &&\n\t\tcss`\n\t\t\theight: 100%;\n\t\t\twidth: 100%;\n\t\t\toverflow: hidden;\n\t\t\tposition: fixed;\n\t\t`}\n}\n\nhtml {\n\t${(props) =>\n\t\tprops.visible &&\n\t\tcss`\n\t\t\theight: 100%;\n\t\t\twidth: 100%;\n\t\t\toverflow: hidden;\n\t\t\tposition: fixed;\n\t\t`}\n}\n`\n\ninterface iProps {\n\tchildren?: JSX.Element[] | JSX.Element\n\topen: boolean\n\tcloseHandler: () => void\n\tanimation: AnimationType\n}\n\nfunction ModalWindow(props: iProps) {\n\t//console.log('APP.TSX: props.animation: ' + props.animation)\n\n\tconst [togglePanel, setTogglePanel] = useState<boolean>(false)\n\tconst [isPanelVisible, setPanelVisible] = useState<boolean>(false)\n\tconst [hasOverlayAnimationEnded, sethasOverlayAnimationEnded] = useState<boolean>(false)\n\tconst [hasPanelTransitionEnded, sethasPanelTransitionEnded] = useState<boolean>(false)\n\tconst [fade, setFade] = useState<FadeType>('')\n\n\tuseEffect(() => {\n\t\tif (props.open) {\n\t\t\topenPanel()\n\t\t} else {\n\t\t\tclosePanel()\n\t\t}\n\t}, [props.open])\n\n\tuseEffect(() => {\n\t\t// if modal should be open\n\t\tif (togglePanel) {\n\t\t\tif (!isPanelVisible) {\n\t\t\t\tsetPanelVisible(true) // set modal to visible\n\t\t\t\tsetFade('in') // set overlay to fade in\n\t\t\t}\n\t\t} else {\n\t\t\tif (isPanelVisible) {\n\t\t\t\tsetPanelVisible(false)\n\t\t\t\tsetFade('out')\n\t\t\t}\n\t\t}\n\t}, [togglePanel, isPanelVisible])\n\n\tuseEffect(() => {\n\t\tif (togglePanel) {\n\t\t\tif (hasOverlayAnimationEnded && hasPanelTransitionEnded) {\n\t\t\t\t// Reset states\n\t\t\t\tsethasOverlayAnimationEnded(false)\n\t\t\t\tsethasPanelTransitionEnded(false)\n\t\t\t}\n\t\t} else {\n\t\t\tif (hasOverlayAnimationEnded && fade === 'out') {\n\t\t\t\tsetFade('')\n\t\t\t}\n\t\t}\n\t}, [hasOverlayAnimationEnded, hasPanelTransitionEnded, togglePanel, fade])\n\n\tfunction closePanel() {\n\t\tsetTogglePanel(false)\n\t}\n\n\tfunction openPanel() {\n\t\tsetTogglePanel(true)\n\t}\n\n\tfunction onOverlayAnimationEnd() {\n\t\tsethasOverlayAnimationEnded(true)\n\t}\n\n\tfunction onPanelTransitionEnd() {\n\t\tsethasPanelTransitionEnded(true)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<GlobalStyle visible={isPanelVisible} />\n\t\t\t<Overlay fade={fade} handleEvent={props.closeHandler} onAnimationEnd={onOverlayAnimationEnd} />\n\t\t\t<Modal animation={props.animation} visible={isPanelVisible} onTransitionEnd={onPanelTransitionEnd} children={props.children} />\n\t\t</React.Fragment>\n\t)\n}\n\nexport default ModalWindow\n","import React from 'react'\nimport { styled } from './theme'\n\nconst PanelButton = styled.button`\n\twidth: 50px;\n\tborder-radius: 5px;\n\tbackground-color: #ec7574;\n\tcolor: white;\n\tfont-weight: bold;\n\theight: 50px;\n\tborder: none;\n\t&:focus {\n\t\toutline: 0;\n\t}\n\tmin-width: 190px;\n\tpadding-left: 20px;\n\tpadding-right: 20px;\n\tmargin-top: 20px;\n\tmargin-right: 30px;\n`\n\ninterface iProps {\n\thandleEvent: () => void\n\ttext: string\n}\n\nfunction Button(props: iProps) {\n\treturn <PanelButton onClick={props.handleEvent}>{props.text}</PanelButton>\n}\n\nexport default Button\n","import React from 'react'\nimport { styled } from './theme'\n\nconst Button = styled.button`\n\twidth: 50px;\n\tborder-radius: 5px;\n\tbackground-color: #ec7574;\n\tcolor: white;\n\tfont-weight: bold;\n\theight: 50px;\n\tborder: none;\n\t&:focus {\n\t\toutline: 0;\n\t}\n\twidth: 30%;\n\tmargin-left: 35%;\n\tmargin-right: 35%;\n\tmargin-top: 20px;\n`\n\ninterface iProps {\n\thandleEvent: () => void\n\ttext: string\n}\n\nfunction CloseButton(props: iProps) {\n\treturn <Button onClick={props.handleEvent}>{props.text}</Button>\n}\n\nexport default CloseButton\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport { AnimationType } from './Components/Types/Types'\nimport ModalWindow from './Components/App'\nimport Button from './Components/MWButton'\nimport CloseButton from './Components/CloseButton'\nimport { ThemeProvider, theme } from './Components/theme'\n\nfunction ModalWindowContainer() {\n\tconst [effect, setEffect] = useState<AnimationType>('effect-1')\n\tconst [open, setOpen] = useState<boolean>(false)\n\n\tfunction closeModalWindow() {\n\t\tsetOpen(false)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<ModalWindow closeHandler={closeModalWindow} animation={effect} open={open}>\n\t\t\t\t\t<img alt=\"Code\" src=\"./img/code.png\" className=\"img-fluid\" />\n\n\t\t\t\t\t<p>Sed posuere consectetur est at lobortis. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet.</p>\n\t\t\t\t\t<p>Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean lacinia bibendum nulla sed consectetur. Vestibulum id ligula porta felis euismod semper.</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec id elit non mi porta gravida at eget metus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Etiam porta sem\n\t\t\t\t\t\tmalesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Sed posuere consectetur est at lobortis. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet.</p>\n\t\t\t\t\t<CloseButton handleEvent={() => closeModalWindow()} text={'Close'} />\n\t\t\t\t</ModalWindow>\n\t\t\t\t<div className=\"select\">\n\t\t\t\t\t<select onChange={(e) => setEffect(e.currentTarget.value as AnimationType)}>\n\t\t\t\t\t\t<option value=\"effect-1\">Fade and Zoom</option>\n\t\t\t\t\t\t<option value=\"effect-2\">Slide from right</option>\n\t\t\t\t\t\t<option value=\"effect-3\">Pop from bottom</option>\n\t\t\t\t\t\t<option value=\"effect-4\">Newspaper</option>\n\t\t\t\t\t\t<option value=\"effect-5\">Fall</option>\n\t\t\t\t\t\t<option value=\"effect-6\">Side fall</option>\n\t\t\t\t\t\t<option value=\"effect-7\">Sticky up</option>\n\t\t\t\t\t\t<option value=\"effect-8\">Side flip</option>\n\t\t\t\t\t\t<option value=\"effect-9\">Top flip</option>\n\t\t\t\t\t\t<option value=\"effect-10\">3D sign</option>\n\t\t\t\t\t\t<option value=\"effect-11\">Scale</option>\n\t\t\t\t\t\t<option value=\"effect-12\">3D slit</option>\n\t\t\t\t\t\t<option value=\"effect-13\">3D rotate bottom</option>\n\t\t\t\t\t\t<option value=\"effect-14\">3D rotate in left</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<Button handleEvent={() => setOpen(true)} text={'Open Modal'} />\n\t\t\t</ThemeProvider>\n\t\t</React.Fragment>\n\t)\n}\nReactDOM.render(<ModalWindowContainer />, document.getElementById('root'))\n"],"sourceRoot":""}